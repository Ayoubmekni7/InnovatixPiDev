Index: src/Controller/DemandeStageController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Demandestage;\r\nuse App\\Form\\DemandeStageType;\r\nuse App\\Repository\\DemandeStageRepository;\r\nuse App\\Repository\\OffreStageRepository;\r\nuse App\\Service\\Mailing;\r\nuse App\\Service\\uploadFile;\r\nuse Doctrine\\Persistence\\ManagerRegistry;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse Symfony\\Component\\String\\Slugger\\SluggerInterface;\r\n\r\nclass DemandeStageController extends AbstractController\r\n{\r\n    \r\n    public Mailing $emailService;\r\n    public string $directory = 'uploads_directory';\r\n    public function __construct(Mailing $emailService)\r\n    {\r\n        $this->emailService = $emailService;\r\n    }\r\n    #[Route('/demandeStage', name: 'demandeStage')]\r\n    public function demandeStage(Request $request,ManagerRegistry $managerRegistry,SluggerInterface $slugger): Response\r\n    {\r\n        $demande = new Demandestage();\r\n        $form = $this->createForm(DemandeStageType::class, $demande);\r\n        $form->handleRequest($request);\r\n        $to = $demande->getEmail();\r\n        $nom = $demande->getNom().$demande->getPrenom();\r\n        $subject = \"Demande effectuer avec succés\";\r\n        $html =\"<div>Bonjour {$nom}.<br>Votre Demande a été effectuer avec succès  .<br>\";\r\n        if($form->isSubmitted() && $form->isValid()){\r\n            $file =  $form->get('cv')->getData();\r\n     \r\n            $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);\r\n            $safeFilename = $slugger->slug($originalFilename);\r\n            $fileName = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();\r\n            \r\n            \r\n            $file->move(\r\n                $this->getParameter($this->directory),\r\n                $fileName\r\n            );\r\n            \r\n            \r\n            $demande->setCv($fileName);\r\n            $x = $managerRegistry->getManager();\r\n            $x->persist($demande);\r\n            $x->flush();\r\n            $this->emailService->sendEmail($to,$subject,$html);\r\n        }\r\n        \r\n        return $this->render('frontOffice/demande_stage/demande.html.twig', [\r\n            'form' => $form->createView(),\r\n        ]);\r\n    }\r\n    #[Route('/ApprouverDemande/{id}', name: 'ApprouverDemande')]\r\n    public function ApprouverDemande($id,DemandeStageRepository $demandestageRepository,ManagerRegistry $managerRegistry): Response\r\n    {\r\n        $em =$managerRegistry->getManager();\r\n        $demande = $demandestageRepository->find($id);\r\n        $demande->setEtat(true);\r\n        $em->persist($demande);\r\n        $em->flush();\r\n        return $this->redirectToRoute('AffichageDesDemandes');\r\n    }\r\n    #[Route('/demandeStageOffre/{id}', name: 'demandeStageOffre')]\r\n    public function demandeStageOffre($id,Request $request,ManagerRegistry $managerRegistry,SluggerInterface $slugger,OffreStageRepository $offreStageRepository): Response\r\n    {\r\n        $offre = $offreStageRepository->find($id);\r\n        $demandeO = new Demandestage();\r\n        $form = $this->createForm(DemandeStageType::class, $demandeO);\r\n        $form->handleRequest($request);\r\n        $to = $demandeO->getEmail();\r\n        $nom = $demandeO->getNom().$demandeO->getPrenom();\r\n        $subject = \"Demande effectuer avec succés\";\r\n        $html =\"<div>Bonjour {$nom}.<br>Votre Demande a été effectuer avec succès  .<br>\";\r\n        if($form->isSubmitted() && $form->isValid()){\r\n            $file =  $form->get('cv')->getData();\r\n            \r\n            $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);\r\n            $safeFilename = $slugger->slug($originalFilename);\r\n            $fileName = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();\r\n            \r\n            \r\n            $file->move(\r\n                $this->getParameter($this->directory),\r\n                $fileName\r\n            );\r\n            $demandeO->setCv($fileName);\r\n            $x = $managerRegistry->getManager();\r\n            $demandeO->setOffreStage($offre);\r\n            $x->persist($demandeO);\r\n            $x->flush();\r\n            $this->emailService->sendEmail($to,$subject,$html);\r\n        }\r\n        \r\n        return $this->render('frontOffice/demande_stage/demande.html.twig', [\r\n            'form' => $form->createView(),\r\n        ]);\r\n    }\r\n    #[Route('/AffichageDesDemandes', name: 'AffichageDesDemandes')]\r\n    public function AffichageDesDemandes(DemandeStageRepository $demandestageRepository): Response\r\n    {\r\n        $titre = \"La liste des demandes\";\r\n        $liste = $demandestageRepository->findAll();\r\n        return $this->render('backOffice/demande_stage/affichage.html.twig', [\r\n            'Demandes' => $liste,\r\n            'titre'=> $titre\r\n        ]);\r\n    }\r\n    #[Route('/deleteDemandeA/{id}/', name: 'deleteDemande')]\r\n    public function deleteDemandeA($id, ManagerRegistry $manager, DemandeStageRepository $repo): Response\r\n    {\r\n        $emm = $manager->getManager();\r\n        $idremove = $repo->find($id);\r\n        $emm->remove($idremove);\r\n        $emm->flush();\r\n        $to = $idremove->getEmail();\r\n        $nom = $idremove->getNom().$idremove->getPrenom();\r\n        $subject = \"Demande effectuer avec succés\";\r\n        $html =\"<div>Bonjour {$nom}.<br>Votre suppression de candidature est effectué avec succès  .<br>\";\r\n        $this->emailService->sendEmail($to,$subject,$html);\r\n        return $this->redirectToRoute('AffichageDesDemandes');\r\n    }\r\n    #[Route('/deleteDemande/{id}/{numero}', name: 'deleteDemandeOffre')]\r\n    public function deleteDemande($id,$numero, ManagerRegistry $manager, DemandeStageRepository $repo): Response\r\n    {\r\n        $emm = $manager->getManager();\r\n        $idremove = $repo->find($id);\r\n        $emm->remove($idremove);\r\n        $emm->flush();\r\n        $to = $idremove->getEmail();\r\n        $nom = $idremove->getNom().$idremove->getPrenom();\r\n        $subject = \"Demande effectuer avec succés\";\r\n        $html =\"<div>Bonjour {$nom}.<br>Votre suppression de candidature est effectué avec succès  .<br>\";\r\n        $this->emailService->sendEmail($to,$subject,$html);\r\n        return $this->redirectToRoute('rechercheDemande',['numero' =>$numero]);\r\n    }\r\n    #[Route('/modifierDemande/{id}/{numero}', name: 'modifierDemande')]\r\n    public function modifierDemande($id,$numero, ManagerRegistry $manager, DemandeStageRepository $demandestageRepository, Request $request, UploadFile $uploaderService): Response\r\n    {\r\n        \r\n        $em = $manager->getManager();\r\n        $idData = $demandestageRepository->find($id);\r\n        $ancienCv = $idData->getCv();\r\n        $idData->setCv(Null);\r\n        $form = $this->createForm(DemandeStageType::class, $idData);\r\n        \r\n        $form->handleRequest($request);\r\n        \r\n        if ($form->isSubmitted() and $form->isValid()) {\r\n            $cv = $form->get('cv')->getData();\r\n            if($cv) {\r\n                $idData->setCv($uploaderService->uploadFile($cv,'uploads_directory'));\r\n            }else{\r\n                $idData->setCv($ancienCv);\r\n            }\r\n            \r\n            $em->persist($idData);\r\n            $em->flush();\r\n            $to = $idData->getEmail();\r\n            $nom = $idData->getNom().$idData->getPrenom();\r\n            $subject = \"Demande effectuer avec succés\";\r\n            $html =\"<div>Bonjour {$nom}.\r\n                    <div>\r\n                    <br>Votre modification de candidature est effectué avec succès  .<br>\r\n                    </div>\";\r\n            $this->emailService->sendEmail($to,$subject,$html);\r\n            return $this->redirectToRoute('rechercheDemande',['numero' =>$numero]);\r\n        }\r\n        return $this->renderForm('frontOffice/demande_stage/edit.html.twig', [\r\n            'form' => $form,\r\n            'ancienCv'=> $ancienCv,\r\n        ]);\r\n    }\r\n    \r\n    #[Route('/rechercheDemande/{numero}', name: 'rechercheDemande')]\r\n    public function rechercheDemande($numero, DemandeStageRepository $demandestageRepository): Response\r\n    {\r\n        \r\n        $idData = $demandestageRepository->Recherche($numero);\r\n        \r\n        return $this->renderForm('frontOffice/demande_stage/SearchDemande.html.twig', [\r\n            'Demandes' => $idData\r\n        ]);\r\n    }\r\n    \r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/DemandeStageController.php b/src/Controller/DemandeStageController.php
--- a/src/Controller/DemandeStageController.php	(revision d36e6e42326a38f563755cecbecbbaaba4292208)
+++ b/src/Controller/DemandeStageController.php	(date 1708563185497)
@@ -18,7 +18,18 @@
 
 class DemandeStageController extends AbstractController
 {
-    
+    // la date et temps actuel
+    //$now = new DateTime('now');
+    //        // Formater le temps réel actuel
+    //        $nowFormatted = $now->format('Y-m-d H:i:s');
+    //
+    //
+    //
+    //// Changer le fuseau horaire à "Europe/Berlin" pendant l'été (Central European Summer Time)
+    //        $now->setTimezone(new DateTimeZone('Europe/Berlin'));
+    //
+    //// Réafficher le temps réel actuel
+    //        $nowFormatted = $now->format('Y-m-d H:i:s');
     public Mailing $emailService;
     public string $directory = 'uploads_directory';
     public function __construct(Mailing $emailService)
Index: src/Controller/OffreStagesController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\OffreStage;\r\nuse App\\Form\\OffreStageType;\r\nuse App\\Form\\SearchType;\r\nuse App\\Repository\\DemandeStageRepository;\r\nuse App\\Repository\\OffreStageRepository;\r\nuse Doctrine\\Persistence\\ManagerRegistry;\r\nuse phpDocumentor\\Reflection\\Types\\This;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass OffreStagesController extends AbstractController\r\n{\r\n    #[Route('/Recrutement', name: 'Recrutement')]\r\n    public function Recrutement(OffreStageRepository $offreStageRepository,Request $request,DemandeStageRepository $demandeStageRepository): Response\r\n    {\r\n        $search = [];\r\n        $form = $this->createForm(SearchType::class,$search);\r\n        $form->handleRequest($request);\r\n        $recherche= $request->get('numero');\r\n        //$domaine = $request->get('domaine');\r\n        $liste = $offreStageRepository->findAll();\r\n        if ($form ->isSubmitted() && $form->isValid()){\r\n            $id = $recherche;\r\n//            $demande = $demandeStageRepository->Recherche($recherche);\r\n//            return $this->render('frontOffice/offre_stage/rechercheNumero.html.twig',[\r\n//                'demande' => $demande,\r\n//            ]);\r\n            return $this->redirectToRoute('rechercheDemande',['numero' =>$id]);\r\n        }\r\n        \r\n        return $this->render('frontOffice/offre_stage/recrutement.html.twig',[\r\n            'offres' => $liste,\r\n            'form' => $form->createView(),\r\n            \r\n        ]);\r\n    }\r\n    #[Route('/Recherche', name: 'Recherche')]\r\n    public function Recherche(DemandeStageRepository $demandeStageRepository,Request $request): Response\r\n    {\r\n        $recherche = $request->get('numero');\r\n        $demande = $demandeStageRepository->Recherche($recherche);\r\n        return $this->render('frontOffice/demande_stage/SearchDemande.html.twig',[\r\n            'Demandes' => $demande,\r\n        ]);\r\n    }\r\n    #[Route('/afficheOffreStages', name: 'afficheOffreStages')]\r\n    public function afficheOffreStages(OffreStageRepository $offreStageRepository): Response\r\n    {\r\n        $liste = $offreStageRepository->findAll();\r\n        return $this->render('backOffice/offre_stage/afficheOffreStages.html.twig',[\r\n            'offres' => $liste,\r\n            \r\n        ]);\r\n    }\r\n    #[Route('/rechercheOffreStages', name: 'rechercheOffreStages')]\r\n    public function rechercheOffreStages(OffreStageRepository $offreStageRepository,Request $request): Response\r\n    {\r\n        $search = [];\r\n        $form = $this->createForm(SearchType::class,$search);\r\n        $form->handleRequest($request);\r\n        $domaine = $request->get('domaine');\r\n        $liste = $offreStageRepository->findOneBySomeField($domaine);\r\n        return $this->render('frontOffice/offre_stage/recrutement.html.twig',[\r\n            'offres' => $liste,\r\n            'form' => $form->createView(),\r\n        \r\n        ]);\r\n    }\r\n    \r\n    \r\n    #[Route('/addOffre', name: 'addOffre')]\r\n    public function addOffre(ManagerRegistry $managerRegistry,Request $request): Response\r\n    {\r\n        $ajouter = \"ajouter\";\r\n        $offre = new OffreStage();\r\n        $form = $this->createForm(OffreStageType::class,$offre);\r\n        $form->handleRequest($request);\r\n        $em = $managerRegistry->getManager();\r\n        if($form->isSubmitted() and $form->isValid() ){\r\n          $em->persist($offre);\r\n          $em->flush();\r\n        }\r\n        return $this->render('backOffice/offre_stage/add.html.twig', [\r\n            'form' => $form->createView(),\r\n            'ajouter' => $ajouter\r\n        ]);\r\n    }\r\n    #[Route('/editOffre/{id}', name: 'editOffre')]\r\n    public function editOffre($id,ManagerRegistry $managerRegistry,Request $request, OffreStageRepository $offreStageRepository): Response\r\n    {\r\n        $modifier = 'modifier';\r\n        $offre = $offreStageRepository->find($id);\r\n        $form = $this->createForm(OffreStageType::class,$offre);\r\n        $form->handleRequest($request);\r\n        $em = $managerRegistry->getManager();\r\n        if($form->isSubmitted() and $form->isValid() ){\r\n            $em->persist($offre);\r\n            $em->flush();\r\n        }\r\n        return $this->render('backOffice/offre_stage/add.html.twig', [\r\n            'form' => $form->createView(),\r\n            'ajouter' => $modifier\r\n        ]);\r\n    }\r\n    #[Route('/deleteOffre/{id}', name: 'deleteOffre')]\r\n    public function deleteOffre($id,ManagerRegistry $managerRegistry,Request $request, OffreStageRepository $offreStageRepository): Response\r\n    {\r\n        $offre = $offreStageRepository->find($id);\r\n        $em = $managerRegistry->getManager();\r\n            $em->remove($offre);\r\n        return new Response(\"suppression avec succès \");\r\n    }\r\n    #[Route('/DetailsOffre/{id}', name: 'DetailsOffre')]\r\n    public function DetailsOffre($id,ManagerRegistry $managerRegistry,Request $request, OffreStageRepository $offreStageRepository): Response\r\n    {\r\n        $offre = $offreStageRepository->find($id);\r\n        return $this->render('frontOffice/offre_stage/Details.html.twig', [\r\n            'offre'=>$offre\r\n        ]);\r\n    }\r\n    \r\n    #[Route('/ChoixDemaine/{domaine}', name: 'ChoixDemaine')]\r\n    public function ChoixDemaine($domaine, OffreStageRepository $offreStageRepository): Response\r\n    {\r\n        $offre = $offreStageRepository->find($domaine);\r\n        return $this->render('frontOffice/offre_stage/recrutement.html.twig', [\r\n            'offre'=>$offre\r\n        ]);\r\n    }\r\n    \r\n    #[Route('/DemandeParOffres/{id}', name: 'DemandeParOffres')]\r\n    public function DemandeParOffres($id, DemandeStageRepository $demandestageRepository,OffreStageRepository $offreStageRepository): Response\r\n    {\r\n        $demande = $demandestageRepository->findDemandesByOffre($id);\r\n        $offre = $offreStageRepository->find($id);\r\n        $name = $offre->getTitle();\r\n        return $this->render('backOffice/demande_stage/affichage.html.twig', [\r\n            'Demandes'=>$demande,\r\n            'titre' => $name\r\n        ]);\r\n    }\r\n    \r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/OffreStagesController.php b/src/Controller/OffreStagesController.php
--- a/src/Controller/OffreStagesController.php	(revision d36e6e42326a38f563755cecbecbbaaba4292208)
+++ b/src/Controller/OffreStagesController.php	(date 1708562759688)
@@ -27,10 +27,6 @@
         $liste = $offreStageRepository->findAll();
         if ($form ->isSubmitted() && $form->isValid()){
             $id = $recherche;
-//            $demande = $demandeStageRepository->Recherche($recherche);
-//            return $this->render('frontOffice/offre_stage/rechercheNumero.html.twig',[
-//                'demande' => $demande,
-//            ]);
             return $this->redirectToRoute('rechercheDemande',['numero' =>$id]);
         }
         
